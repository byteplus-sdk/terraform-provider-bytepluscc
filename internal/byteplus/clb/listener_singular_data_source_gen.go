// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package clb

import (
	"context"

	"github.com/byteplus-sdk/terraform-provider-bytepluscc/internal/generic"
	"github.com/byteplus-sdk/terraform-provider-bytepluscc/internal/registry"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func init() {
	registry.AddDataSourceFactory("bytepluscc_clb_listener", listenerDataSource)
}

// listenerDataSource returns the Terraform bytepluscc_clb_listener data source.
// This Terraform data source corresponds to the Cloud Control Byteplus::CLB::Listener resource.
func listenerDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AclIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"acl_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AclStatus
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "description": "是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"acl_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AclType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。",
		//	  "enum": [
		//	    "white",
		//	    "black"
		//	  ],
		//	  "type": "string"
		//	}
		"acl_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Bandwidth
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": -1,
		//	  "description": "监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"bandwidth": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CACertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "双向认证的CA证书。",
		//	  "type": "string"
		//	}
		"ca_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "双向认证的CA证书。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CAEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否开启双向认证。on：开启。off（默认值）：不开启。",
		//	  "enum": [
		//	    "on",
		//	    "off",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"ca_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启双向认证。on：开启。off（默认值）：不开启。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertCenterCertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书中心的证书的ID。",
		//	  "type": "string"
		//	}
		"cert_center_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书中心的证书的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "CLB侧证书管理模块的证书的ID。",
		//	  "type": "string"
		//	}
		"certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "CLB侧证书管理模块的证书的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateSource
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。",
		//	  "enum": [
		//	    "clb",
		//	    "cert_center",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"certificate_source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClientBodyTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效",
		//	  "format": "int64",
		//	  "maximum": 120,
		//	  "minimum": 30,
		//	  "type": "integer"
		//	}
		"client_body_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClientHeaderTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
		//	  "format": "int64",
		//	  "maximum": 120,
		//	  "minimum": 30,
		//	  "type": "integer"
		//	}
		"client_header_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionDrainEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"connection_drain_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionDrainTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"connection_drain_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Cookie
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。",
		//	  "maxLength": 200,
		//	  "type": "string"
		//	}
		"cookie": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Cps
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"cps": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的创建时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。",
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Enabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "on",
		//	  "description": "是否启用监听器。on（默认值）：开启。off：不开启。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否启用监听器。on（默认值）：开启。off：不开启。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndPort
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"end_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EstablishedTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"established_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheck
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "健康检查相关信息。",
		//	  "properties": {
		//	    "Domain": {
		//	      "description": "健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。",
		//	      "maxLength": 128,
		//	      "type": "string"
		//	    },
		//	    "Enabled": {
		//	      "default": "on",
		//	      "description": "监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。",
		//	      "enum": [
		//	        "on",
		//	        "off"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "HealthyThreshold": {
		//	      "default": 3,
		//	      "description": "健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。",
		//	      "format": "int64",
		//	      "maximum": 10,
		//	      "minimum": 2,
		//	      "type": "integer"
		//	    },
		//	    "HttpCode": {
		//	      "description": "健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http_2xx （默认值）、http_3xx、http_4xx、http_5xx。多个状态码间用半角逗号“,”分隔。",
		//	      "type": "string"
		//	    },
		//	    "Interval": {
		//	      "default": 2,
		//	      "description": "执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。",
		//	      "format": "int64",
		//	      "maximum": 300,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "Method": {
		//	      "description": "监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。",
		//	      "enum": [
		//	        "GET",
		//	        "HEAD"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "健康检查的端口，取值范围为1-65535。",
		//	      "format": "int64",
		//	      "maximum": 65535,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "Timeout": {
		//	      "default": 2,
		//	      "description": "健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。",
		//	      "format": "int64",
		//	      "maximum": 60,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "UdpExpect": {
		//	      "description": "健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。",
		//	      "maxLength": 64,
		//	      "type": "string"
		//	    },
		//	    "UdpRequest": {
		//	      "description": "执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。",
		//	      "maxLength": 64,
		//	      "type": "string"
		//	    },
		//	    "UnhealthyThreshold": {
		//	      "default": 3,
		//	      "description": "不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。",
		//	      "format": "int64",
		//	      "maximum": 10,
		//	      "minimum": 2,
		//	      "type": "integer"
		//	    },
		//	    "Uri": {
		//	      "description": "健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、\u0026、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。",
		//	      "maxLength": 128,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"health_check": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Domain
				"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HealthyThreshold
				"healthy_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HttpCode
				"http_code": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http_2xx （默认值）、http_3xx、http_4xx、http_5xx。多个状态码间用半角逗号“,”分隔。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Interval
				"interval": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Method
				"method": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的端口，取值范围为1-65535。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Timeout
				"timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UdpExpect
				"udp_expect": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UdpRequest
				"udp_request": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UnhealthyThreshold
				"unhealthy_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Uri
				"uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "健康检查相关信息。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Http2Enabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"http_2_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KeepaliveTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
		//	  "format": "int64",
		//	  "maximum": 900,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"keepalive_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ListenerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的ID。",
		//	  "type": "string"
		//	}
		"listener_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ListenerName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"listener_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "CLB实例的ID。",
		//	  "type": "string"
		//	}
		"load_balancer_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "CLB实例的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxConnections
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"max_connections": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PersistenceTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"persistence_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PersistenceType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "description": "会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。",
		//	  "enum": [
		//	    "off",
		//	    "source_ip",
		//	    "insert",
		//	    "server"
		//	  ],
		//	  "type": "string"
		//	}
		"persistence_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Port
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的协议。",
		//	  "enum": [
		//	    "TCP",
		//	    "UDP",
		//	    "HTTP",
		//	    "HTTPS"
		//	  ],
		//	  "type": "string"
		//	}
		"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的协议。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProxyConnectTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
		//	  "format": "int64",
		//	  "maximum": 120,
		//	  "minimum": 4,
		//	  "type": "integer"
		//	}
		"proxy_connect_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProxyProtocolType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。",
		//	  "enum": [
		//	    "off",
		//	    "standard"
		//	  ],
		//	  "type": "string"
		//	}
		"proxy_protocol_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProxyReadTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
		//	  "format": "int64",
		//	  "maximum": 3600,
		//	  "minimum": 30,
		//	  "type": "integer"
		//	}
		"proxy_read_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProxySendTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
		//	  "format": "int64",
		//	  "maximum": 3600,
		//	  "minimum": 30,
		//	  "type": "integer"
		//	}
		"proxy_send_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Scheduler
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "wrr",
		//	  "description": "监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。",
		//	  "enum": [
		//	    "wrr",
		//	    "wlc",
		//	    "sh"
		//	  ],
		//	  "type": "string"
		//	}
		"scheduler": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityPolicyId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default_policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls_cipher_policy_1_0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls_cipher_policy_1_1：支持TLS v1.1、TLS v1.2。tls_cipher_policy_1_2：支持TLS v1.2。tls_cipher_policy_1_2_strict：支持TLS v1.2。",
		//	  "type": "string"
		//	}
		"security_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default_policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls_cipher_policy_1_0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls_cipher_policy_1_1：支持TLS v1.1、TLS v1.2。tls_cipher_policy_1_2：支持TLS v1.2。tls_cipher_policy_1_2_strict：支持TLS v1.2。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SendTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
		//	  "format": "int64",
		//	  "maximum": 3600,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"send_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器关联的后端服务器组 ID。",
		//	  "type": "string"
		//	}
		"server_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器关联的后端服务器组 ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StartPort
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"start_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。",
		//	  "enum": [
		//	    "Creating",
		//	    "Active",
		//	    "Deleting",
		//	    "Disabled"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器所属标签。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "监听器所属标签。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器最近一次的操作时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器最近一次的操作时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WafProtectionEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"waf_protection_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Byteplus::CLB::Listener",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Byteplus::CLB::Listener").WithTerraformTypeName("bytepluscc_clb_listener")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"acl_ids":                    "AclIds",
		"acl_status":                 "AclStatus",
		"acl_type":                   "AclType",
		"bandwidth":                  "Bandwidth",
		"ca_certificate_id":          "CACertificateId",
		"ca_enabled":                 "CAEnabled",
		"cert_center_certificate_id": "CertCenterCertificateId",
		"certificate_id":             "CertificateId",
		"certificate_source":         "CertificateSource",
		"client_body_timeout":        "ClientBodyTimeout",
		"client_header_timeout":      "ClientHeaderTimeout",
		"connection_drain_enabled":   "ConnectionDrainEnabled",
		"connection_drain_timeout":   "ConnectionDrainTimeout",
		"cookie":                     "Cookie",
		"cps":                        "Cps",
		"created_time":               "CreatedTime",
		"description":                "Description",
		"domain":                     "Domain",
		"enabled":                    "Enabled",
		"end_port":                   "EndPort",
		"established_timeout":        "EstablishedTimeout",
		"health_check":               "HealthCheck",
		"healthy_threshold":          "HealthyThreshold",
		"http_2_enabled":             "Http2Enabled",
		"http_code":                  "HttpCode",
		"interval":                   "Interval",
		"keepalive_timeout":          "KeepaliveTimeout",
		"key":                        "Key",
		"listener_id":                "ListenerId",
		"listener_name":              "ListenerName",
		"load_balancer_id":           "LoadBalancerId",
		"max_connections":            "MaxConnections",
		"method":                     "Method",
		"persistence_timeout":        "PersistenceTimeout",
		"persistence_type":           "PersistenceType",
		"port":                       "Port",
		"protocol":                   "Protocol",
		"proxy_connect_timeout":      "ProxyConnectTimeout",
		"proxy_protocol_type":        "ProxyProtocolType",
		"proxy_read_timeout":         "ProxyReadTimeout",
		"proxy_send_timeout":         "ProxySendTimeout",
		"scheduler":                  "Scheduler",
		"security_policy_id":         "SecurityPolicyId",
		"send_timeout":               "SendTimeout",
		"server_group_id":            "ServerGroupId",
		"start_port":                 "StartPort",
		"status":                     "Status",
		"tags":                       "Tags",
		"timeout":                    "Timeout",
		"udp_expect":                 "UdpExpect",
		"udp_request":                "UdpRequest",
		"unhealthy_threshold":        "UnhealthyThreshold",
		"updated_time":               "UpdatedTime",
		"uri":                        "Uri",
		"value":                      "Value",
		"waf_protection_enabled":     "WafProtectionEnabled",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
