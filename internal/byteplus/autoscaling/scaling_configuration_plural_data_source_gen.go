// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/plural-data-source/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"

	"github.com/byteplus-sdk/terraform-provider-bytepluscc/internal/generic"
	"github.com/byteplus-sdk/terraform-provider-bytepluscc/internal/registry"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func init() {
	registry.AddDataSourceFactory("bytepluscc_autoscaling_scaling_configurations", scalingConfigurationsDataSource)
}

// scalingConfigurationsDataSource returns the Terraform bytepluscc_autoscaling_scaling_configurations data source.
// This Terraform data source corresponds to the Cloud Control Byteplus::AutoScaling::ScalingConfiguration resource.
func scalingConfigurationsDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Description: "Uniquely identifies the data source.",
			Computed:    true,
		},
		"ids": schema.SetAttribute{
			Description: "Set of Resource Identifiers.",
			ElementType: types.StringType,
			Computed:    true,
		},
	}

	schema := schema.Schema{
		Description: "Plural Data Source schema for Byteplus::AutoScaling::ScalingConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Byteplus::AutoScaling::ScalingConfiguration").WithTerraformTypeName("bytepluscc_autoscaling_scaling_configurations")
	opts = opts.WithTerraformSchema(schema)

	v, err := generic.NewPluralDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
